#!/usr/bin/env php
<?php

use GetOpt\ArgumentException\Missing;
use GetOpt\GetOpt;
use GetOpt\Option;
use PWC\CLI;
use PWC\CLI\Config as CLIConfig;
use PWC\Config;
use PWC\Config\Application;
use PWC\Util\File;

$rootDir = getcwd() . '/';
$composer = include_once(getcwd() . '/vendor/autoload.php');

Config::register(CLIConfig::class, [
    'composerAutoload' => $composer
]);

Config::register(Application::class, [
    'rootDir' => $rootDir
]);

$opt = new GetOpt();
$opt->set(GetOpt::SETTING_SCRIPT_NAME, 'pwc');
$opt->addOptions([
    Option::create(null, 'help', GetOpt::NO_ARGUMENT)->setDescription('Show this help')
]);

$composerMap = array_merge($composer->getPrefixes(), $composer->getPrefixesPsr4(), $composer->getClassMap());

$cliDirs = $composerMap['PWC\\CLI\\'] ?? [];

foreach ($cliDirs as $cliDir) {
    File::recursiveRead($cliDir, function ($file) use ($cliDir, $opt) {
        $command = '\\PWC\\CLI' . str_replace('/', '\\', str_replace([
            $cliDir, '.php'
        ], '', $file));

        if (is_subclass_of($command, CLI::class)) {
            $opt->addCommand((new $command()));
        }
    });
}

try {
    try {
        $opt->process();
    } catch (Missing $exception) {
        if (!$opt->getOption('help')) {
            throw $exception;
        }
    }
} catch (Exception $e) {
    file_put_contents('php://stderr', $e->getMessage() . PHP_EOL);
    echo PHP_EOL . $opt->getHelpText();
    exit;
}

$command = $opt->getCommand();
if (!$command || $opt->getOption('help')) {
    echo $opt->getHelpText();
    exit;
}

call_user_func($command->getHandler(), $opt);
